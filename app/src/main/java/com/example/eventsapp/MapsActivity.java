package com.example.eventsapp;import androidx.annotation.NonNull;import androidx.core.content.ContextCompat;import androidx.fragment.app.FragmentActivity;import androidx.fragment.app.FragmentManager;import androidx.fragment.app.FragmentTransaction;import android.Manifest;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.location.Address;import android.location.Geocoder;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.os.Build;import android.os.Bundle;import android.view.View;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.MarkerOptions;import java.io.IOException;import java.util.List;import java.util.Locale;public class MapsActivity extends FragmentActivity implements OnMapReadyCallback, GoogleMap.OnMapLongClickListener {    private GoogleMap mMap;    LocationListener locationListener;    LocationManager locationManager;    String address = "";    String title;    Double latitude,longitude;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_maps);        // Obtain the SupportMapFragment and get notified when the map is ready to be used.        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()                .findFragmentById(R.id.location_map);        mapFragment.getMapAsync(this);    }    @Override    public void onMapReady(GoogleMap googleMap) {        mMap = googleMap;        mMap.setOnMapLongClickListener(this);        Intent intent = getIntent();        String info = intent.getStringExtra("info");        latitude = intent.getDoubleExtra("latitude",0.0);        longitude = intent.getDoubleExtra("longitude",0.0);        title = intent.getStringExtra("loc");        if (info.matches("new")){            locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);            locationListener = new LocationListener() {                @Override                public void onLocationChanged(Location location) {                    SharedPreferences sharedPreferences = MapsActivity.this.getSharedPreferences("abdurrahman",MODE_PRIVATE);                    boolean firstTimeCheck = sharedPreferences.getBoolean("notFirstTime",false);                    if (!firstTimeCheck){                        LatLng userLocation = new LatLng(location.getLatitude(),location.getLongitude());                        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(userLocation,15));                        sharedPreferences.edit().putBoolean("notFirstTime",true).apply();                    }                }                @Override                public void onStatusChanged(String provider, int status, Bundle extras) {                }                @Override                public void onProviderEnabled(String provider) {                }                @Override                public void onProviderDisabled(String provider) {                }            };            if (Build.VERSION.SDK_INT >= 23){                if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED){                    requestPermissions(new String[] {Manifest.permission.ACCESS_FINE_LOCATION},1);                }else{                    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,0,0,locationListener);                    Location lastLocation = locationManager.getLastKnownLocation(locationManager.GPS_PROVIDER);                    if (lastLocation != null){                        LatLng lastUserLocation = new LatLng(lastLocation.getLatitude(),lastLocation.getLongitude());                        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(lastUserLocation,15));                        mMap.addMarker(new MarkerOptions().title("It's Me!").position(lastUserLocation));                    }                }            }else{                locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,0,0,locationListener);                Location lastLocation = locationManager.getLastKnownLocation(locationManager.GPS_PROVIDER);                if (lastLocation != null){                    LatLng lastUserLocation = new LatLng(lastLocation.getLatitude(),lastLocation.getLongitude());                    mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(lastUserLocation,15));                    mMap.addMarker(new MarkerOptions().title("It's Me!").position(lastUserLocation));                }            }        }else{            mMap.clear();            LatLng location = new LatLng(latitude,longitude);            mMap.addMarker(new MarkerOptions().title(title).position(location));            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(location,15));        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if (grantResults.length > 0 ){            if (requestCode == 1){                if (ContextCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED){                    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,0,0,locationListener);                    Intent intent = getIntent();                    String info = intent.getStringExtra("info");                    if (info.matches("new")){                        Location lastLocation = locationManager.getLastKnownLocation(locationManager.GPS_PROVIDER);                        if (lastLocation != null){                            LatLng lastUserLocation = new LatLng(lastLocation.getLatitude(),lastLocation.getLongitude());                            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(lastUserLocation,15));                        }                    }else{                        mMap.clear();                        LatLng location = new LatLng(latitude,longitude);                        mMap.addMarker(new MarkerOptions().title(title).position(location));                        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(location,15));                    }                }            }        }        super.onRequestPermissionsResult(requestCode, permissions, grantResults);    }    @Override    public void onMapLongClick(LatLng latLng) {        mMap.clear();        Geocoder geocoder = new Geocoder(getApplicationContext(), Locale.getDefault());        try {            List<Address> addressList = geocoder.getFromLocation(latLng.latitude,latLng.longitude,1);            if (addressList != null && addressList.size() > 0){                if (addressList.get(0).getThoroughfare() != null){                    address += addressList.get(0).getThoroughfare();                    if (addressList.get(0).getSubThoroughfare() != null){                        address += " " + addressList.get(0).getSubThoroughfare();                    }                    address += " " + addressList.get(0).getLocality();                }            }else{                address = "New Place";            }        } catch (IOException e) {            e.printStackTrace();        }        mMap.addMarker(new MarkerOptions().title(address).position(latLng));        Intent intent = new Intent();        intent.putExtra("address",address);        intent.putExtra("lat",latLng.latitude);        intent.putExtra("long",latLng.longitude);        setResult(2,intent);        finish();    }}